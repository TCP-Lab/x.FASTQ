#!/bin/bash

# ==============================================================================
#  Align transcripts and quantify abundances using STAR and RSEM
# ==============================================================================
ver="2.0.0"

# --- Source common settings and functions -------------------------------------
# NOTE: 'realpath' expands symlinks by default. Thus, $xpath is always the real
#       installation path, even when this script is called by a symlink!
xpath="$(dirname "$(realpath "$0")")"
source "${xpath}"/workers/x.funx.sh
source "${xpath}"/workers/progress_funx.sh

# --- Help message -------------------------------------------------------------

read -d '' _help_anqfastq << EOM || true
anqFASTQ (short for Align'n'Quantify FASTQs) is a wrapper of the STAR aligner
and RSEM quantifier designed to process multiple FASTQ files in sequence by
scheduling a series of transcript alignment and abundance quantification steps.
To make the job suitable for execution on a remote machine, processes are by
default run with persistence (i.e., ignoring the hangup signal HUP) and in the
background. By design, only BAM (not SAM) files are generated by STAR and
removed (by default) after each RSEM cycle.

Usage:
  anqfastq [-h | --help] [-v | --version]
  anqfastq -p | --progress [DATADIR]
  anqfastq -k | --kill
  anqfastq [-q | --quiet] [-w | --workflow] [-s | --single-end]
           [-i | --interleaved] [-a | --keep-all] [--suffix="PATTERN"] DATADIR

Positional options:
  -h | --help         Shows this help.
  -v | --version      Shows script's version.
  -p | --progress     Shows alignment and quantification progress by printing
                      the latest cycle of the latest (possibly growing) log
                      file. If DATADIR is not specified, it searches \$PWD for
                      anqFASTQ logs.
  -k | --kill         Gracefully (-15) kills all the 'STAR' and 'RSEM' instances
                      currently running and started by the current user.
  -q | --quiet        Disables verbose on-screen logging.
  -w | --workflow     Makes processes run in the foreground for use in pipelines.
  -s | --single-end   Single-ended (SE) reads. NOTE: non-interleaved (i.e.,
                      dual-file) PE reads is the default.
  -i | --interleaved  PE reads interleaved into a single file. Ignored when '-s'
                      option is also present.
  -a | --keep-all     Does not delete BAM files after quantification (for people
                      who have unlimited storage space...)
  --suffix="PATTERN"  For dual-file PE reads, "PATTERN" should be a regex-like
                      pattern of this type
                          "leading_str(alt_1|alt_2)trailing_str",
                      specifying the two alternative suffixes used to match
                      paired FASTQs, the default being "(1|2).fastq.gz".
                      For SE reads or interleaved PE reads, it can be any text
                      string, the default being ".fastq.gz". In any case, this
                      option must be set after -s/-i flags.
  DATADIR             Path of a FASTQ-containing folder. The script assumes that
                      all the FASTQs are in the same directory, but it doesn't
                      inspect subfolders. Placed right after '-p' option, it is
                      the path where to look for anqFASTQ progress logs.
EOM

# --- Argument parsing and validity check --------------------------------------

# Default options
verbose=true
pipeline=false
paired_reads=true
dual_files=true
remove_bam=true
suffix_pattern="(1|2).fastq.gz"
se_suffix=".fastq.gz"

# Flag Regex Pattern (FRP)
frp="^-{1,2}[a-zA-Z0-9-]+"
# Suffix Regex Pattern (SRP) for dual-file PE reads
srp="^.*\(.*\|.*\).*$"

# Argument check: options
while [[ $# -gt 0 ]]; do
    if [[ "$1" =~ $frp ]]; then
        case "$1" in
            -h | --help)
                printf "%s\n" "$_help_anqfastq"
                exit 0
            ;;
            -v | --version)
                _print_ver "a'n'q FASTQ" "${ver}" "FeAR"
                exit 0
            ;;
            -p | --progress)
                # Cryptic one-liner meaning "$2" or $PWD if argument 2 is unset
                _progress_anqfastq "${2:-.}"
                exit 0
            ;;
            -k | --kill)
                _gracefully_kill "STAR" "rsem-"
                # Update the MOTD
                _set_motd "${xpath}/config/motd_idle" \
                    "gracefully killed" "read alignment"
                exit 0
            ;;
            -q | --quiet)
                verbose=false
                shift
            ;;
            -w | --workflow)
                pipeline=true
                shift
            ;;
            -s | --single-end)
                paired_reads=false
                shift
            ;;
            -i | --interleaved)
                dual_files=false
                shift
            ;;
            -a | --keep-all)
                remove_bam=false
                shift  
            ;;
            --suffix*)
                # Test for '=' presence
                rgx="^--suffix="
                if [[ "$1" =~ $rgx ]]; then
                    if [[ $paired_reads == true && $dual_files == true \
                        && "${1/--suffix=/}" =~ $srp ]]; then
                        suffix_pattern="${1/--suffix=/}"
                        shift
                    elif [[ ($paired_reads == false || $dual_files == false) \
                        && "${1/--suffix=/}" != "" ]]; then
                        se_suffix="${1/--suffix=/}"
                        shift
                    else
                        _print_bad_suffix
                        exit 6
                    fi
                else
                    _print_bad_assignment "--suffix"
                    exit 7
                fi
            ;;
            *)
                _print_bad_flag $1
                exit 4
            ;;
        esac
    else
        # The first non-FRP sequence is taken as the DATADIR argument
        target_dir="$(realpath "$1")"
        shift
    fi
done

# Argument check: DATADIR directory
_check_target "directory" "${target_dir:-}"

# Fetch STAR and RSEM local paths from 'config/install.paths'
starpath="$(_read_config "STAR")"
starindex_path="$(_read_config "S_index")"
rsempath="$(_read_config "RSEM")"
rsemref_path="$(_read_config "R_ref")"

# Check if stuff exists
if [[ -z "${starpath}" || ! -e "${starpath}/STAR" ]]; then
    eprintf "Couldn't find 'STAR' executable...\n" \
        "Please, check the 'install.paths' file.\n"
    exit 11
fi
if [[ -z "${starindex_path}" || ! -e "${starindex_path}/SA" ]]; then
    eprintf "Couldn't find a valid 'STAR' index...\n" \
        "Please, build one using 'STAR ... --runMode genomeGenerate ...'\n" \
        "and check the 'install.paths' file.\n"
    exit 11
fi
if [[ -z "${rsempath}" || ! -e "${rsempath}/rsem-calculate-expression" ]]; then
    eprintf "Couldn't find 'rsem-calculate-expression' executable...\n" \
        "Please, check the 'install.paths' file.\n"
    exit 11
fi
if [[ -z "${rsemref_path}" || -z "$(find "$(dirname "${rsemref_path}")" \
    -maxdepth 1 -type f -iname "$(basename "${rsemref_path}*")" \
    2> /dev/null)" ]]; then
    eprintf "Couldn't find a valid 'RSEM' reference...\n" \
        "Please, build one using 'rsem-prepare-reference'\n" \
        "and check the 'install.paths' file.\n"
    exit 11
fi

# --- Main program -------------------------------------------------------------

# Prevent multiple STAR/RSEM instances
running_proc=$(pgrep -l "STAR|rsem-" | wc -l || [[ $? == 1 ]])
if [[ $running_proc -gt 0 ]]; then
    eprintf "\nSome instances of either STAR or RSEM are already running " \
        "in the background!\n" \
        "Please kill them or wait for them to finish before running this " \
        "script again...\n"
    exit 12
fi

# Set the log file
# When creating the log file, 'basename "$target_dir"' assumes that DATADIR
# was properly named with the current BioProject/Study ID.
log_file="${target_dir}/Z_anqFASTQ_$(basename "$target_dir")_$(_tstamp).log"
_dual_log false "$log_file" "-- $(_tstamp) --\n"
_dual_log $verbose "$log_file" \
    "anqFASTQ :: x.FASTQ Wrapper for STAR and RSEM :: ver.${ver}\n\n"

# Set the warning login message
_set_motd "${xpath}/config/motd_warn" | tee -a "$log_file"

_dual_log $verbose "$log_file" \
    "STAR found in \"${starpath}\"\n" \
    "STAR index found in \"${starindex_path}\"\n" \
    "RSEM found in \"${rsempath}\"\n" \
    "RSEM reference found in \"$(dirname "${rsemref_path}")\"\n\n" \
    "Searching '${target_dir}' for FASTQs to align...\n\n"

# Select the proper library layout and prepare variables
if $paired_reads && $dual_files; then

    _dual_log $verbose "$log_file" "Running in \"dual-file paired-end\" mode:\n"

    # Assign paired suffixes
    r_suffix="$(_explode_ORpattern "$suffix_pattern")"
    r1_suffix="$(echo "$r_suffix" | cut -d ',' -f 1)"
    r2_suffix="$(echo "$r_suffix" | cut -d ',' -f 2)"
    _dual_log $verbose "$log_file" \
        "   Suffix 1: ${r1_suffix}\n" \
        "   Suffix 2: ${r2_suffix}\n"

    extension=".*\.gz$"
    if [[ ! "$r_suffix" =~ $extension ]]; then
        _dual_log true "$log_file" \
            "\nFATAL: Only .gz-compressed FASTQs are currently supported!\n" \
            "Adapt '--readFilesCommand' option to handle different formats.\n"
        exit 6
    fi

    _check_fastq_pairing $verbose "$log_file" \
                         "$r1_suffix" "$r2_suffix" "$target_dir"

elif ! $paired_reads; then

    _dual_log $verbose "$log_file" \
        "Running in \"single-ended\" mode:\n" \
        "   Suffix: ${se_suffix}\n"

    extension=".*\.gz$"
    if [[ ! "$se_suffix" =~ $extension ]]; then
        _dual_log true "$log_file" \
            "\nFATAL: Only .gz-compressed FASTQs are currently supported!\n" \
            "Adapt '--readFilesCommand' option to handle different formats.\n"
        exit 6
    fi

    _check_fastq_unpaired $verbose "$log_file" "$se_suffix" "$target_dir"
    
elif ! $dual_files; then

    _dual_log true "$log_file" \
        "\nSTAR doesn't currently support PE interleaved FASTQ files.\n" \
        "Check it out at https://github.com/alexdobin/STAR/issues/686\n" \
        "You can deinterlace them first and then run x.FASTQ in the\n" \
        "dual-file PE default mode. See, e.g.,\n\n" \
        "Posts\n" \
        "  https://stackoverflow.com/questions/59633038/how-to-split-paired-end-fastq-files\n" \
        "  https://www.biostars.org/p/141256/\n" \
        "\ndeinterleave_fastq.sh on GitHub Gist\n" \
        "  https://gist.github.com/nathanhaigh/3521724\n\n" \
        "seqfu deinterleave\n" \
        "  https://telatin.github.io/seqfu2/tools/deinterleave.html\n"
        exit 14
fi

# Export variables needed by 'starsem' script (running in a subshell)
export	xpath paired_reads dual_files target_dir r1_suffix r2_suffix se_suffix \
        counter starpath starindex_path rsempath rsemref_path  remove_bam

# HOLD-ON STATEMENT
_hold_on "$log_file" "${xpath}/starsem.sh"
