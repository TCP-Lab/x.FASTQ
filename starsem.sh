#!/bin/bash

# ==============================================================================
#  Align transcripts and quantify abundances using STAR and RSEM
# ==============================================================================
ver="0.0.0"

# Source functions from x.funx.sh
source "${xpath}"/x.funx.sh

# All these variables are exported from the anqfastq wrapper:
#
# xpath, paired_reads, dual_files, target_dir, r1_suffix, r2_suffix, se_suffix,
# counter, starpath, starindex_path, rsempath, rsemref_path, remove_bam,
# verbose, log_file

# --- Main program -------------------------------------------------------------

if $paired_reads && $dual_files; then

    # Loop over FASTQ pairs
    i=1 # Just another counter
    for r1_infile in "${target_dir}"/*"$r1_suffix"
    do
        r2_infile="$(echo "$r1_infile" | sed "s/$r1_suffix/$r2_suffix/")"

        printf "%b\n" "\n============" \
                        " Cycle ${i}/${counter}" \
                        "============" \
                        "Targeting: ${r1_infile}" \
                        "           ${r2_infile}"

        r1_length=$(_mean_read_length "$r1_infile")
        r2_length=$(_mean_read_length "$r2_infile")
        printf "\nEstimated (ceiling) mean read length: ${r1_length} + ${r2_length} bp"
        if [[ $r1_length -lt 50 || $r2_length -lt 50 ]]; then
            min_length=$(( r1_length < r2_length ? r1_length-1 : r2_length-1 ))
            printf "%b\n" \
                "WARNING: Mean read length less than 50 bp detected !!\n" \
                "If using a \"standard\" STAR index (i.e., '--sjdbOverhang 100')" \
                "consider building another one using '--sjdbOverhang ${min_length}'."
        fi

        # Change the working directory (of the sub-shell in which anqFASTQ is
        # running) and move to DATADIR (i.e., ${target_dir}).
        # Using relative paths is inelegant, but it is the only workaround I
        # found to successfully feed paths containing spaces to STAR. Even
        # hard-escaping the names of in/out directories by backslashes (i.e.,
        # "${r1_infile//" "/'\ '}") didn't work, probably due to some
        # STAR-inherent path handling features.
        cd "$target_dir"
        base_r1_infile="$(basename "$r1_infile")"
        base_r2_infile="$(basename "$r2_infile")"

        # To get a unique prefix, take the filename and remove the suffix,
        # any possible "TRIM" string, and non alphanumeric trailing characters.
        prefix="$(echo "$base_r1_infile" \
            | sed -E "s/${r1_suffix}//g" \
            | sed -E "s/_?TRIM_?//g" \
            | sed -E "s/[-_\.]+$//g")"

        out_dir="./Counts/${prefix}"
        mkdir -p "$out_dir"

        # Run STAR
        printf "\nStart aligning through STAR...\n"
        # also try to add this to use shared memory: --genomeLoad LoadAndKeep \
        ${starpath}/STAR \
            --runThreadN 8 \
            --runMode alignReads \
            --quantMode TranscriptomeSAM \
            --outSAMtype BAM Unsorted \
            --genomeDir "$starindex_path" \
            --readFilesIn "$base_r1_infile" "$base_r2_infile" \
            --readFilesCommand gunzip -c \
            --outFileNamePrefix "${out_dir}/${prefix}_STAR." \
            >> "${log_file}" 2>&1

        # Run RSEM
        printf "\nStart quantification through RSEM...\n"
        ${rsempath}/rsem-calculate-expression \
            -p 8 \
            --alignments \
            --paired-end \
            --no-bam-output \
            "${out_dir}/${prefix}_STAR.Aligned.toTranscriptome.out.bam" \
            "${rsemref_path}" \
            "${out_dir}/${prefix}_RSEM" \
            >> "${log_file}" 2>&1

        printf "DONE!"

        # Remove BAM files generated by STAR
        if $remove_bam; then
            rm "${out_dir}"/*.bam
        fi

        # Increment the i counter
        ((i++))
    done

elif ! $paired_reads; then

    # Loop over FASTQ files
    i=1 # Just another counter
    for infile in "${target_dir}"/*"$se_suffix"
    do
        printf "%b\n" "\n============" \
                        " Cycle ${i}/${counter}" \
                        "============" \
                        "Targeting: ${infile}"

        r_length=$(_mean_read_length "$infile")
        printf "\nEstimated (ceiling) mean read length: ${r_length} bp"
        if [[ $r_length -lt 50 ]]; then
            min_length=$(( r_length - 1 ))
            printf "%b\n" \
                "WARNING: Mean read length less than 50 bp detected !!\n" \
                "If using a \"standard\" STAR index (i.e., '--sjdbOverhang 100')" \
                "consider building another one using '--sjdbOverhang ${min_length}'."
        fi

        # Change the working directory (of the sub-shell in which anqFASTQ is
        # running) and move to DATADIR (i.e., ${target_dir}).
        cd "$target_dir"
        base_infile="$(basename "$infile")"

        # To get a unique prefix, take the filename and remove the suffix,
        # any possible "TRIM" string, and non alphanumeric trailing characters.
        prefix="$(echo "$base_infile" \
            | sed -E "s/${se_suffix}//g" \
            | sed -E "s/_?TRIM_?//g" \
            | sed -E "s/[-_\.]+$//g")"

        out_dir="./Counts/${prefix}"
        mkdir -p "$out_dir"

        # Run STAR
        printf "\nStart aligning through STAR...\n"
        # also try to add this to use shared memory: --genomeLoad LoadAndKeep \
        ${starpath}/STAR \
            --runThreadN 8 \
            --runMode alignReads \
            --quantMode TranscriptomeSAM \
            --outSAMtype BAM Unsorted \
            --genomeDir "$starindex_path" \
            --readFilesIn "$base_infile" \
            --readFilesCommand gunzip -c \
            --outFileNamePrefix "${out_dir}/${prefix}_STAR." \
            >> "${log_file}" 2>&1

        # Run RSEM
        printf "%b\n" \
            "\nWARNING: no information available about fragment length!" \
            "         RSEM will run in single-end mode without considering" \
            "         fragment length distribution. See the 'README.md' file" \
            "         for a discussion about the implication of this."
        printf "\nStart quantification through RSEM...\n"
        ${rsempath}/rsem-calculate-expression \
            -p 8 \
            --alignments \
            --no-bam-output \
            "${out_dir}/${prefix}_STAR.Aligned.toTranscriptome.out.bam" \
            "${rsemref_path}" \
            "${out_dir}/${prefix}_RSEM" \
            >> "${log_file}" 2>&1

        printf "DONE!"

        # Remove BAM files generated by STAR
        if $remove_bam; then
            rm "${out_dir}"/*.bam
        fi

        # Increment the i counter
        ((i++))
    done
fi

# Restore the standard MOTD
_set_motd "${xpath}/config/motd_idle" \
    "smoothly completed" "read alignment" >> "$log_file"
